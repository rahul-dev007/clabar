// src/lib/authOptions.ts

import { NextAuthOptions } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import GithubProvider from "next-auth/providers/github";
import CredentialsProvider from "next-auth/providers/credentials";
import axiosInstance from "./axiosInstance"; // üëà ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶∏‡ßç‡¶ü‡¶Æ axiosInstance

// TypeScript ‡¶ü‡¶æ‡¶á‡¶™ ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá
declare module "next-auth" {
    interface User { id: string; role?: string; }
    interface Session { user: User & { id: string; role?: string; }; }
}
declare module "next-auth/jwt" {
    interface JWT { id: string; role?: string; }
}

export const authOptions: NextAuthOptions = {
    // 1. ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßç‡¶∞‡ßã‡¶≠‡¶æ‡¶á‡¶°‡¶æ‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
    providers: [
        GoogleProvider({
            clientId: process.env.GOOGLE_CLIENT_ID!,
            clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
        }),
        GithubProvider({
            clientId: process.env.GITHUB_CLIENT_ID!,
            clientSecret: process.env.GITHUB_CLIENT_SECRET!,
        }),
        CredentialsProvider({
            name: "Credentials",
            credentials: {
                email: { label: "Email", type: "email" },
                password: { label: "Password", type: "password" }
            },
            async authorize(credentials) {
                if (!credentials?.email || !credentials?.password) {
                    throw new Error("Email and Password are required.");
                }
                try {
                    const response = await axiosInstance.post('/api/auth/login', {
                        email: credentials.email,
                        password: credentials.password,
                    });
                    const backendResponse = response.data;
                    if (backendResponse && backendResponse.user) {
                        return backendResponse.user;
                    }
                    return null;
                } catch (error: any) {
                    const errorMessage = error.response?.data?.message || "Invalid credentials.";
                    throw new Error(errorMessage);
                }
            }
        })
    ],

    // 2. Callbacks
    callbacks: {
        // üî¥üî¥ signIn ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡¶ø API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá üî¥üî¥
        async signIn({ user, account }) {
            // ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶∏‡ßã‡¶∂‡ßç‡¶Ø‡¶æ‡¶≤ ‡¶™‡ßç‡¶∞‡ßã‡¶≠‡¶æ‡¶á‡¶°‡¶æ‡¶∞ ‡¶¶‡¶ø‡ßü‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶≤‡ßá ‡¶è‡¶á ‡¶ï‡ßã‡¶° ‡¶ö‡¶≤‡¶¨‡ßá
            if (account?.provider === 'google' || account?.provider === 'github') {
                try {
                    // ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ /api/auth/social-login ‡¶è‡¶®‡ßç‡¶°‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                    await axiosInstance.post('/api/auth/social-login', {
                        name: user.name,
                        email: user.email,
                        image: user.image,
                        provider: account.provider,
                    });
                    
                    // API ‡¶ï‡¶≤ ‡¶∏‡¶´‡¶≤ ‡¶π‡¶≤‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡ßü‡¶æ‡¶ï‡ßá ‡¶è‡¶ó‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                    return true;

                } catch (error) {
                    console.error("Social login sync failed:", error);
                    // API ‡¶ï‡¶≤ ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶≤‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶•‡¶æ‡¶Æ‡¶ø‡ßü‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
                    return false; 
                }
            }
            // Credentials ‡¶≤‡¶ó‡¶á‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã API ‡¶ï‡¶≤ ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶®‡ßá‡¶á, ‡¶§‡¶æ‡¶á ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø true
            return true;
        },

        // jwt ‡¶è‡¶¨‡¶Ç session ‡¶ï‡¶≤‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
        async jwt({ token, user }) {
            if (user) {
                token.id = user.id;
                token.role = user.role;
            }
            return token;
        },
        async session({ session, token }) {
            if (token && session.user) {
                session.user.id = token.id;
                session.user.role = token.role;
            }
            return session;
        }
    },

    // 3. ‡¶∏‡ßá‡¶∂‡¶® ‡¶è‡¶¨‡¶Ç ‡¶™‡ßá‡¶ú ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® (‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§)
    session: {
        strategy: "jwt",
    },
    pages: {
        signIn: '/login',
        error: '/login'
    },
    secret: process.env.NEXTAUTH_SECRET,
};